#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cours:server');
var http = require('http');
var _ = require('lodash');

var rooms = []


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io     = require('socket.io')(server);

io.on('connection', function(socket){
  socket.on('join_room', function(id){
    var currentRoom = _.findWhere(rooms, {id: id});

    if ( !currentRoom ) {
      debug("Creating new room");
      rooms.push({ id: id, players: [socket.id], started: true });
    } else {
      debug("Add new player to existing room with socketId ");
      if (currentRoom.players > 2 ) {
        debug('room is full');
        socket.emit('room_full');
        return;
      }

      debug('pushing socket');
      currentRoom['players'].push(socket.id);
    }

    if (currentRoom && currentRoom['players'].length == 2 )  {
      debug("Start the game finishing it in 30s");
      currentRoom['started'] = true;

      setTimeout(function(){
        currentRoom['started'] = false;
        _.each(currentRoom['players'], function(socketId){
          _.findWhere(io.sockets.sockets, {id: socketId}).emit('game_end');
        });
        rooms = _.reject(rooms, {id: id});

      }, 30000);
    }
  });

  socket.on('draw_circle', function(attrs){
    var currentRoom = _.findWhere(rooms, {id: attrs['id']});

    if (!currentRoom)            { socket.emit("wait_player_2"); return; }
    if (!currentRoom['started']) { socket.emit("game_finished"); return; }

    _.each(currentRoom['players'], function(socketId){
      _.findWhere(io.sockets.sockets, {id: socketId}).emit('draw_circle', attrs);
    });
  })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
